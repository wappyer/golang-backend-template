package repository

import (
	"context"
	"gitee.com/wappyer/golang-backend-template/internal/domain/model"
	"gitee.com/wappyer/golang-backend-template/internal/infrastructure/errno"
	"gitee.com/wappyer/golang-backend-template/internal/infrastructure/log"
)

type I{{.ModelNameUpper}}Repository interface {
	AutoMigrate(ctx context.Context) error
	Get(ctx context.Context, m *model.{{.ModelNameUpper}}) (bool, error)
	MustGet(ctx context.Context, m *model.{{.ModelNameUpper}}) errno.Errno
	Add(ctx context.Context, m *model.{{.ModelNameUpper}}) error
	AddBatch(ctx context.Context, m []*model.{{.ModelNameUpper}}) error
	Update(ctx context.Context, m *model.{{.ModelNameUpper}}) error
	Delete(ctx context.Context, id int) error
	List(ctx context.Context, req {{.ModelNameUpper}}ListReq) (int64, []*model.{{.ModelNameUpper}}, error)
}

type {{.ModelNameUpper}}Repository struct {
}

func New{{.ModelNameUpper}}Repository() *{{.ModelNameUpper}}Repository {
	return &{{.ModelNameUpper}}Repository{}
}

func (a *{{.ModelNameUpper}}Repository) AutoMigrate(ctx context.Context) error {
	return GetAppDBWithCtx(ctx).AutoMigrate(&model.{{.ModelNameUpper}}{})
}

func (a *{{.ModelNameUpper}}Repository) Get(ctx context.Context, m *model.{{.ModelNameUpper}}) (bool, error) {
	tmp := model.{{.ModelNameUpper}}{}
	if *m == tmp { // 空结构体也能查出记录，过滤一下
		return false, nil
	}
	tx := GetAppDBWithCtx(ctx).Where(m).Limit(1).Find(m)
	return tx.RowsAffected > 0, tx.Error
}

func (a *{{.ModelNameUpper}}Repository) MustGet(ctx context.Context, m *model.{{.ModelNameUpper}}) errno.Errno {
	has, err := a.Get(ctx, m)
	if err != nil {
		log.W(ctx).Errorf(log.TplErrorDatabase, err)
		return errno.NewErrno(errno.CodeDatabase)
	}
	if !has {
		return errno.NewErrno(errno.CodeDataSelect)
	}
	return errno.Errno{}
}

func (a *{{.ModelNameUpper}}Repository) Add(ctx context.Context, m *model.{{.ModelNameUpper}}) error {
	return GetAppDBWithCtx(ctx).Create(m).Error
}

func (a *{{.ModelNameUpper}}Repository) AddBatch(ctx context.Context, m []*model.{{.ModelNameUpper}}) error {
	return GetAppDBWithCtx(ctx).Create(m).Error
}

func (a *{{.ModelNameUpper}}Repository) Update(ctx context.Context, m *model.{{.ModelNameUpper}}) error {
	return GetAppDBWithCtx(ctx).Model(m).Updates(m).Error
}

func (a *{{.ModelNameUpper}}Repository) Delete(ctx context.Context, id int) error {
	return GetAppDBWithCtx(ctx).Delete(&model.{{.ModelNameUpper}}{}, id).Error
}

type {{.ModelNameUpper}}ListReq struct {
	UserId string
}

func (a *{{.ModelNameUpper}}Repository) List(ctx context.Context, req {{.ModelNameUpper}}ListReq) (int64, []*model.{{.ModelNameUpper}}, error) {
	var list []*model.{{.ModelNameUpper}}
	var count int64
	err := GetAppDBWithCtx(ctx).Where(&model.{{.ModelNameUpper}}{UserId: req.UserId}).Find(&list).Offset(-1).Count(&count).Error
	return count, list, err
}
